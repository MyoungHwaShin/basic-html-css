/* 전체 선택자 */
* {
  color: inherit;
  /* 따로 color를 주었음에도
  상속받는다
   */
}
/* 가상 요소 선택자
드래그시 색이 변하는 것
*/
::selection {
  background: #373e6a;
  color: hotpink;
}

/* CSS 선택자(Selector) */
/* 전체 태그 선택자 */
/* 이렇게 통으로 선택자 쓰는거랑 아이디에 스타일 주는 거
둘 다 안티패턴라고 하셨다 */
body {
  font-family: "SUIT";
  
  font-weight: 300;
  background-color: #000000;
  /* 000000은 모니터에 따라 색이 다르게 검정을 표현한다 이쁜 검정은 #181818 ,#121212*/
  color: hsla(110,50%,30%,1);
  /* a는 알파값 투명도 0~1 사이의 수를 이용 
  hsla HTML에서 색상은 색(hue), 채도(saturation), 명도(lightness)  HSL로도 정의할 수 있습니다.

hsl(hue, saturation, lightness)

색은  0에서 360까지의 색상환에서의 정도를 나타냅니다. 0은 빨간색이고 120은 초록색, 240은 파란색입니다.

채도는 색의 선명도를 퍼센트 수치로 나타냅니다. 0%는 회색이며 100%는 제일 선명한 원색의 수치입니다.

명도 또한 밝기의 단계를 퍼센트 수치로 나타냅니다. 0%는 검정색이며 50%는 중간 밝기, 100%는 흰색입니다.

color:inherit 상속을 의미*/

/* 두가지 충돌(겹침)시 내가 가진 값을 더 우선한다

*/

}



/*  
em - equalm
ex -
ch -
rem -
vw -
vh -
vmin -
% -

px - 절대 단위이면서 상대 단위입니다.
상세 단위: px는 화면 상의 실제 픽셀 단위를 나타내므로, 가장 상세한 단위로 요소의 크기나 위치를 지정할 수 있습니다. 다른 상대적인 단위(예: %)보다 훨씬 정확하게 요소의 크기를 조절할 수 있습니다.

절대 단위: px는 화면에 표시되는 컨텐츠의 크기를 고정적으로 정의합니다. 다른 상대적인 단위(예: em, rem)와 달리, px는 상대적인 크기에 의존하지 않고 고정된 크기를 가집니다. 예를 들어, font-size 속성을 16px로 설정하면 해당 텍스트의 크기는 항상 16px로 유지됩니다.

그러나 px는 절대적인 픽셀 크기를 나타내므로 다양한 디스플레이 크기나 해상도에서 동일한 크기로 표현되지 않을 수 있습니다. 이는 모바일 장치나 다양한 화면 크기를 고려할 때 유의해야 할 점입니다. 따라서 반응형 웹 디자인을 구축할 때는 상대적인 단위(예: %, em, rem)를 사용하여 유연한 레이아웃을 구성하는 것이 일반적입니다.

css에서 색상 값
키워드 방식
transparent
currentcolor
16진수 #15131
rgba
rgb

*/
/* 클래스 선택자 */
.fancy {
  font-weight: bold;
  text-shadow: 4px 4px 3px #77f;
}

.align {
  text-align: center;

}


ul.menu{
	margin: 0;
	padding-left: 0;
  color: red;
}

/* ul .menu의 뜻은 ul 밑에 class가 menu인 녀석으 찾아달라는 말씀 */

/* id 선택자 
id는 한번밖에 사용하지 못합니다.*/

#demo {
  border: red 5px solid;
}

/* 속성 선택자 pdf,, */
.menu a[href$=".html"] {
  background-color: blue;

}

/* 

[lang="en"] {
  font-family: Helvetica;
}
캐럿기호 / 이걸로 시작하는거 찾아
a[href^="https://"] {
  background: url("../assets/images/external-link.png") no-repeat 100% 0;
	padding-right: 30px;
}

a[href$=".pdf"] {
  font-weight: 700;
} */

/* 선택자 목록
 */
 .fancy, .menu{

font-size: 50px;

 }

 /* 가상 요소 선택자 
 원래 있어야 하는데 가상으로 만들어 넣는 것
 드래그 선택시 p요소 안에 자식 요소로
 텍스트 노드에 형제 컨텐츠를 앞 뒤로 만들어 준 것 
 이 가상 요소들은 나의 가상요소이기 때문에
 사이를 띄우지 않고 붙여서 만들어줄 것
 */
 /* 앞 */
 .align::before{
  content: "이전 요소";
 }
/* 뒤 */
 .align::after{
  content:"좋아요";

 }

 /* 변수를 만들어 준다
 ex) --primary-color: #545454;
 조건을 줄 것
 a가 포커스를 받으면
 a의 부모를 선택하지 못했었는데
 이제는 가능하지렁
 그게 focus-within
 */

 /* input:disabled
 input:valid
 값이 유효한 상태(값이 딱 맞을 때) 체크드 마크를 디자인해주기
 input:invalid
 오류나면 주변에 빨간테두리 주기 오류를 알려줌 스크립트로 하기보다 이게 더 자원아껴준당
 */

 /* 
 .menu li:nth-child(2){
두번째 자식한테 적용하기
 }
 .menu li:ntn-child(-n + 2){
-n+2 라는 것은 네거티브 방식
 }

 .menu li:nth-child(n+6){
 }
 */

 /* .menu li:nth-child(-n + 2), .menu li:nth-child(n + 7) {

color: yellow;


 } */

 /* .menu li:nth-child(odd){
color:grey;
홀수만
 } */

 /* 
 호버는 다 사용 가능
 .menu a:hover {
 border: 5px solid orange;
 
 
} */

/* 포커서블하게 만드려면 tabindex=0 주기 */


h1.menu:hover,
h1.menu:focus{
  background-color: teal;

}

/* agent 스타일은 내가 적용하지 않아요 웹에 기본 적으로 장착된 스타일을 말한다.
이를 제거 하고 싶다면 reset을 사용한다. */
/* 
css reset 은
기본 스타일 거의 없애고 새로 스타일 주기
css normalize는
브라우저마다 약간씩 상이한 스타일을
모두 평이하고 같게 만들어주는 것 
*/